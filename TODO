CURRENT
- invalidate (cached and current) configs on filter change! (e.g. incompatible filter chain (curves) blocks file view!)
- mat cache invalidation (broken? old tiles?)
- extra _prepare call to move calculations from _inputs_fixed which is called often in configuration!
- filterchain f√ºr einzelne files!


next:
- add useful --help to limedo with full list of filters/settings
- benchmarking and README
- add glsl code for RBPi
- make configuration non-global - bind to filters/filterchain
- clean api, api examples
- race on remove filter in limeview - do not queue del request?

short term:
- fix tiff writer : we somehow write too much data (can be cleaned out with tiffcp)
- valgrind: memleaks
- really enable cache size changes
- clean up code all filter
- api purge "clobber", replace by buffering
- hide private stuff
- limeview: mat_cache remove only invisible stuff when too full
- limeview: glitches on step_image with many tags in tags list

mid term:
- add generic evas/elm object for lime
- simplify specification tree definition
- fix gauss blur rounding
- speed up configuration
  - do everything as late as possible (input fixed etc.)
  - jpg+tiff: check file extension first
- remove busy wait for renderer
- tiledata area handling? no pointer?

long term:
- composition
- clean autoconfiguration
  - do filters need to know their connections? handle externally!
- pass trough input tiles with same area
- combined iterating and buffering filter mode
- multiple regions/scales for buffering interface
- intelligent cache metrics
- more bit dephts
- automatic application of filters to multiple channels!

- more filters
- integrate memory usage of filters in cache size calculations
- better filter interface
- better buffering interface (current is just a hack)
- filter level threading for buffering mode (less memory consumption, works with buffering interface)
- filter level threading for iterating mode (works with all filters, might be difficult (TIFF!?))

- internal thread id handling, allocate only the necessary per thread for threads currently in used
    free data if not used for some time? integrate within cache management.
    
- abstract sink node, like load one single node with settings, file format/memsink found by pairing!
- orientation for file loading!

- threading
  waiting for tiles rendered on other threads causes problems for jpeg loader, it would be optimal to render multiple scale in parallel!
  hint on used tiles

